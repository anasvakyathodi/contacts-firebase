{"version":3,"sources":["components/ContactForm.js","firebase.js","components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","initialState","fullname","mobile","email","address","useState","values","setValues","useEffect","currentId","contactObjects","handleInputChange","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","className","placeholder","onChange","required","type","fireDB","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","Contacts","done","setDone","setContactObjects","setCurrentId","firebaseDB","child","on","snapshot","val","style","marginTop","color","obj","push","err","console","log","set","overflow","Object","keys","map","id","key","onClick","window","confirm","remove","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1429a403.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nconst ContactForm = (props) => {\r\n  const initialState = {\r\n    fullname: \"\",\r\n    mobile: \"\",\r\n    email: \"\",\r\n    address: \"\",\r\n  };\r\n  const [values, setValues] = useState(initialState);\r\n  useEffect(() => {\r\n    if (props.currentId == \"\") {\r\n      setValues({\r\n        ...initialState,\r\n      });\r\n    } else {\r\n      setValues({\r\n        ...props.contactObjects[props.currentId],\r\n      });\r\n    }\r\n  }, [props.currentId, props.contactObjects]);\r\n  const handleInputChange = (e) => {\r\n    var { name, value } = e.target;\r\n    setValues({\r\n      ...values,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.addOrEdit(values);\r\n  };\r\n\r\n  return (\r\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\r\n      <div className=\"form-group\">\r\n        <input\r\n          className=\"form-control\"\r\n          placeholder=\"Full Name\"\r\n          value={values.fullname}\r\n          name=\"fullname\"\r\n          onChange={handleInputChange}\r\n          required\r\n        />\r\n      </div>\r\n      <div className=\"form-row\">\r\n        <div className=\"col-md-6 form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            placeholder=\"Mobile\"\r\n            value={values.mobile}\r\n            name=\"mobile\"\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            placeholder=\"Email\"\r\n            value={values.email}\r\n            name=\"email\"\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          className=\"form-control\"\r\n          placeholder=\"Address\"\r\n          name=\"address\"\r\n          value={values.address}\r\n          onChange={handleInputChange}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <input\r\n          type=\"submit\"\r\n          className=\"btn btn-primary btn-block\"\r\n          value={props.currentId == \"\" ? \"save\" : \"Update\"}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import * as firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyA5t5au_2a44s8vqLZ70unM5NJOTQRKog4\",\r\n  authDomain: \"learning-app-ce74f.firebaseapp.com\",\r\n  databaseURL: \"https://learning-app-ce74f.firebaseio.com\",\r\n  projectId: \"learning-app-ce74f\",\r\n  storageBucket: \"learning-app-ce74f.appspot.com\",\r\n  messagingSenderId: \"309501596531\",\r\n  appId: \"1:309501596531:web:14e75ca5364a992d6feb06\",\r\n  measurementId: \"G-MDDF4MJ8WC\",\r\n};\r\n// Initialize Firebase\r\nvar fireDB = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDB.database().ref();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport ContactForm from \"./ContactForm\";\r\nimport firebaseDB from \"../firebase\";\r\nconst Contacts = () => {\r\n  const addOrEdit = (obj) => {\r\n    if (currentId === \"\") {\r\n      firebaseDB.child(\"contacts\").push(obj, (err) => {\r\n        if (err) console.log(err);\r\n        else setCurrentId(\"\");\r\n      });\r\n    } else {\r\n      firebaseDB.child(`contacts/${currentId}`).set(obj, (err) => {\r\n        if (err) console.log(err);\r\n        else setCurrentId(\"\");\r\n      });\r\n    }\r\n  };\r\n  const onDelete = (key) => {\r\n    if (window.confirm(\"Are you sure ?\")) {\r\n      firebaseDB.child(`contacts/${key}`).remove((err) => {\r\n        if (err) console.log(err);\r\n        else setCurrentId(\"\");\r\n      });\r\n    }\r\n  };\r\n  const [done, setDone] = useState(false);\r\n  const [contactObjects, setContactObjects] = useState({});\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n  useEffect(() => {\r\n    firebaseDB.child(\"contacts\").on(\"value\", (snapshot) => {\r\n      if (snapshot.val() != null) {\r\n        setContactObjects({\r\n          ...snapshot.val(),\r\n        });\r\n        setDone(true);\r\n      } else {\r\n        setContactObjects({});\r\n      }\r\n    });\r\n  }, []);\r\n  return (\r\n    <>\r\n      {done === false ? (\r\n        <center style={({ height: \"100vh\" }, { marginTop: \"40vh\" })}>\r\n          <ReactLoading type={\"bars\"} color={\"#00b4d8\"} />\r\n        </center>\r\n      ) : (\r\n        <div className=\"container\">\r\n          <div className=\"jumbotron jumbotron-fluid\">\r\n            <h2 className=\"text-center head-text\">Contact Register</h2>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-5\">\r\n              <ContactForm {...{ addOrEdit, currentId, contactObjects }} />\r\n            </div>\r\n            <div className=\"col-md-7\" style={{ overflow: \"auto\" }}>\r\n              <table className=\"table table-borderless table-striped\">\r\n                <thead className=\"thread-light\">\r\n                  <tr>\r\n                    <th>Full Name</th>\r\n                    <th>Mobile</th>\r\n                    <th>Email</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {Object.keys(contactObjects).map((id) => (\r\n                    <tr key={id}>\r\n                      <td>{contactObjects[id].fullname}</td>\r\n                      <td>{contactObjects[id].mobile}</td>\r\n                      <td>{contactObjects[id].email}</td>\r\n                      <td>\r\n                        <a\r\n                          className=\"btn text-primary\"\r\n                          onClick={() => setCurrentId(id)}\r\n                        >\r\n                          <i className=\"fas fa-pencil-alt\"></i>\r\n                        </a>\r\n                        <a\r\n                          className=\"btn text-danger\"\r\n                          onClick={() => onDelete(id)}\r\n                        >\r\n                          <i className=\"fas fa-trash-alt\"></i>\r\n                        </a>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from \"react\";\nimport Contacts from \"./components/Contacts\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Contacts />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}